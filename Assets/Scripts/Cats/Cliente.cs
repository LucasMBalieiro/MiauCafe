using UnityEngine;
using System.Collections.Generic;
using Managers; // Assuming ItemRegistry is in Managers namespace
using Scriptables.Item; // For your new ScriptableObjects and enums

public class Cliente : MonoBehaviour
{
    public GameObject prefabPedido; // Prefab for the UI element representing an ordered item
    // You likely won't need ingredientPrefab here anymore, as InventoryManager handles spawning DraggableItems

    private List<GameObject> pedidoUI = new List<GameObject>(); // List to hold the spawned UI representations of orders

    // The CatManager (or whichever system generates orders) should set these
    // Use BaseItemScriptableObject for flexibility, or IngredientScriptableObject if only ingredients are ordered
    public Transform bandeija; // Parent transform for the order UI elements
    public List<BaseItemScriptableObject> orderedItems = new List<BaseItemScriptableObject>(); // The actual item ScriptableObjects being ordered
    public List<int> orderedQuantities = new List<int>(); // Quantities for each ordered item

    // (Audio related code can remain as is, it's not directly related to item system)
    //[Header("Configuração de Áudio")]
    //[SerializeField] private AudioClip backgroundLoop;
    //private AudioSource audioSource;


    void Start()
    {
        // Example of how CatManager (or another system) might initialize an order:
        // For demonstration, I'll put some example order items directly here.
        // In a real game, this would be dynamically generated by a "CatManager" or "OrderGenerator"
        // and passed to the Cliente instance.

        // Clear any previous example data if this is part of a pool or reuse setup
        orderedItems.Clear();
        orderedQuantities.Clear();
        foreach (GameObject uiElement in pedidoUI)
        {
            Destroy(uiElement); // Destroy old UI elements if any
        }
        pedidoUI.Clear();

        // --- Example: Setting up an order using the new system ---
        // Get references to specific item ScriptableObjects from the ItemRegistry
        // (Ensure your ItemRegistry asset is correctly populated in Unity Editor!)

        // Order: 2x Coffee Tier 1
        BaseItemScriptableObject coffeeT1 = ItemRegistry.Instance.GetIngredient(IngredientType.Cafe, 1);
        if (coffeeT1 != null)
        {
            orderedItems.Add(coffeeT1);
            orderedQuantities.Add(2);
        }
        else
        {
            Debug.LogError("Coffee Tier 1 not found in ItemRegistry. Please check your ItemRegistry asset.");
        }

        // Order: 1x Coffee Tier 2
        BaseItemScriptableObject coffeeT2 = ItemRegistry.Instance.GetIngredient(IngredientType.Cafe, 2);
        if (coffeeT2 != null)
        {
            orderedItems.Add(coffeeT2);
            orderedQuantities.Add(1);
        }
        else
        {
            Debug.LogError("Coffee Tier 2 not found in ItemRegistry. Please check your ItemRegistry asset.");
        }

        // --- Spawn the UI elements for the order ---
        for (int i = 0; i < orderedItems.Count; i++)
        {
            if (prefabPedido == null)
            {
                Debug.LogError("Prefab for Pedido (order slot) is not assigned in Cliente.prefabPedido!");
                return; // Stop execution if critical prefab is missing
            }
            if (bandeija == null)
            {
                Debug.LogError("Bandeija (parent transform for order UI) is not assigned in Cliente.bandeija!");
                return; // Stop execution if critical transform is missing
            }

            // Instantiate the UI element for each ordered item
            GameObject spawnedPedidoUI = Instantiate(prefabPedido, bandeija);
            pedidoUI.Add(spawnedPedidoUI);

            // Get the Pedido component and set its data
            // You will need to update your 'Pedido' script as well to accept BaseItemScriptableObject
            Pedido pedidoComponent = spawnedPedidoUI.GetComponent<Pedido>();
            if (pedidoComponent != null)
            {
                pedidoComponent.SetPedido(orderedItems[i], orderedQuantities[i]);
            }
            else
            {
                Debug.LogError("Pedido prefab is missing the 'Pedido' component!");
                Destroy(spawnedPedidoUI); // Clean up the instantiated object
            }
        }
    }

    void Update()
    {
        // Your Update logic, if any, goes here.
        // It's unlikely to be directly affected by item system changes unless it checks order completion.
    }

    // You might add methods here to check if an order is complete, e.g.:
    public bool CheckOrderCompletion(List<DraggableItem> itemsInDeliverySlot)
    {
        // This is a simplified example. You'd need more robust matching logic.
        // Example: Check if items in delivery slot match orderedItems and quantities

        // For simplicity, let's assume `itemsInDeliverySlot` are the items the player is trying to deliver.
        Dictionary<BaseItemScriptableObject, int> deliveredCounts = new Dictionary<BaseItemScriptableObject, int>();
        foreach (var draggableItem in itemsInDeliverySlot)
        {
            if (draggableItem.itemData != null)
            {
                if (deliveredCounts.ContainsKey(draggableItem.itemData))
                {
                    deliveredCounts[draggableItem.itemData]++;
                }
                else
                {
                    deliveredCounts[draggableItem.itemData] = 1;
                }
            }
        }

        // Now compare `deliveredCounts` with `orderedItems` and `orderedQuantities`
        if (deliveredCounts.Count != orderedItems.Count)
        {
            return false; // Mismatch in number of unique items
        }

        for (int i = 0; i < orderedItems.Count; i++)
        {
            BaseItemScriptableObject requiredItem = orderedItems[i];
            int requiredQuantity = orderedQuantities[i];

            if (!deliveredCounts.TryGetValue(requiredItem, out int actualDeliveredCount) || actualDeliveredCount < requiredQuantity)
            {
                return false; // Required item not delivered or not enough quantity
            }
        }

        Debug.Log("Order completed successfully!");
        return true;
    }
}